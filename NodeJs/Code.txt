**Código de bibliotecas ou conceitos para NodeJs**

-----------UPLOAD DE ARQUIVOS COM MULTER-----------------

yarn add multer
yarn add @types/multer -D

// biblioteca para ler arquivos csv
yarn add csv-parse

Fazer a importação aonde vai utilizar o multer.

import multer from "multer";

Criar uma pasta no projeto para mandar os arquivos de upload. No exemplo será utilizada uma pasta temporária na raiz do projeto chamada "tmp", assim que utilizar esses arquivos será feito a deleção.

const upload = multer({
  dest: "./tmp",
});

O multer funciona como um middleware, logo deverá ser passado como parametro para a rota. Conforme o exemplo abaixo.

//route
categoriesRoutes.post("/import", upload.single("file"), (request, response) => {
  return importCategoryController.handle(request, response);
});

//controller
import { Request, Response } from "express";

import { ImportCategoryUseCase } from "./ImportCategoryUseCase";

class ImportCategoryController {
  constructor(private importCategoryUseCase: ImportCategoryUseCase) {}

  handle(request: Request, response: Response): Response {
   /**
   * O nome da váriavel deve ser o mesmo
   * que foi passado como parametro para o upload.single("file")
   */
    const { file } = request;

    this.importCategoryUseCase.execute(file);

    return response.send();
  }
}

export { ImportCategoryController };


// service ou useCase
import csVparse from "csv-parse";
import fs from "fs";

import { ICategoriesRepository } from "../../repositories/ICategoriesRepository";

interface IImportCategory {
  name: string;
  description: string;
}

class ImportCategoryUseCase {
  constructor(private categoriesRepository: ICategoriesRepository) {}

  /**
   * Funcão para leitura de arquivo
   * @param file Arquivo que será manipulado
   * @returns Returna um array com as informaçõpes manipuladas
   */
  loadCategory(file: Express.Multer.File): Promise<IImportCategory[]> {
    return new Promise((resolve, reject) => {
      const categories: IImportCategory[] = [];

      /**
       * Criar leitura do arquivo
       */
      const stream = fs.createReadStream(file.path);

      /**
       * Por padrão o csvParse entende que o
       * delimitador (separador de informações) é a vírgula (,).
       */
      const parseFile = csVparse();

      /**
       * Pega informação de dentro do arquivo e coloca em outro lugar
       */
      stream.pipe(parseFile);

      /**
       * Retornar o array se tudo der certo,
       * ou um erro caso de errado.
       */
      parseFile
        .on("data", async (line) => {
          const [name, description] = line;

          categories.push({
            name,
            description,
          });
        })
        .on("end", () => {
          /**
           * Remove o arquivo da pasta temporária
           */
          fs.promises.unlink(file.path);
          resolve(categories);
        })
        .on("error", (err) => {
          reject(err);
        });
    });
  }

  async execute(file: Express.Multer.File): Promise<void> {
    const categories = await this.loadCategory(file);

    /**
     * Faz a leitura de cada array e salva no repositório
     */
    categories.map(async (category) => {
      const { name, description } = category;

      const existCategory = this.categoriesRepository.findByName(name);

      if (!existCategory) {
        this.categoriesRepository.create({
          name,
          description,
        });
      }
    });
  }
}

export { ImportCategoryUseCase };

Exemplo de exportar a configuração do upload em outro arquivo
https://github.com/ga-almeida/rentalx/blob/main/src/config/upload.ts

Exemplo de uso na rota "users"
https://github.com/ga-almeida/rentalx/blob/main/src/routes/users.routes.ts

--------------------Documentação de API com SWAGGER-----------------------

yarn add swagger-ui-express
yarn add @types/swagger-ui-express -D

Criar um arquivo json dentro da pasta "src" com o nome swagger.json.

{
  "openapi": "3.0.0",
  "info": {
    // Titulo da documentação
    "title": "Rentalx Documentation",

    // Descrição da documentação
    "description": "This is an API Rent", 

    // Versão da documentação
    "version": "1.0.0",

    // Contato do dev
    "contact": {
      "email": "gabrielsantos.almeida@hotmail.com"
    }
  },
  
  // Mapeamento das rotas e informações para o que elas servem
  "paths": {
  
    // Exemplo da rota "/categories"
    "/categories": {
      
      // O tipo do verbo da rota, no exemplo "post"
      "post": {
      
      	// Definir uma tag
      	"tags": ["Category"],
      	
      	// Resumo da rota
        "summary": "Create a category",
        
        // Descrição da rota
        "description": "Create a new category",
        
        // O corpo da rota caso exista
        "requestBody": {
        
          // O conteúdo da rota
          "content": {
          
            // O tipo que a rota recebe como valor , no exemplo "json"
            "application/json": {
            
              // Definição dos tipos e atributos
              "schema": {
                "type": "object",
                
                // as propriedades que é passado no corpo da requisição
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                
                // Exemplo de como deve ser passado para o corpo da requisição 
                "example": {
                  "name": "Category name sample",
                  "description": "Category description sample"
                }
              }
            }
          }
        },
        
        // Definição das possiveis respostas da rota
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Category already exists"
          }
        }
      },
      
      // Exemplo de um rota do tipo get
      "get": {
        "tags": ["Category"],
        "summary": "List categories",
        "description": "List all categories",
        "responses": {
          "200": {
            "description": "Success",
            
            // Exemplo de conteúdo que será retornado
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "created_at": {
                      	 "type": "string",
                      	 "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


Fazer a importação do swagger no arquivo onde sobe o servidor do projeto. E disponibilizar uma rota para a documentação das apis.

import express from "express";
import swaggerUi from "swagger-ui-express";

import swaggerFile from "./swagger.json";

const app = express();

app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerFile));

-------------UTILIZAR TYPEORM PARA UTILIZAR BANCO DE DADOS-------------

Instalar a biblioteca typeorm com reflect metadata

yarn add typeorm reflect-metadata

Instalar o driver do banco de dados que irá utilizar no projeto, exemplo postgres:

yarn add pg

Deixar as configurações abaixo no tsconfig.json como true:

"experimentalDecorators": true,
"emitDecoratorMetadata": true,  

Criar um pasta chamada "database" dentro da pasta "src".

Dentro da pasta "database", criar um arquivo "index.ts" com o conteúdo abaixo.

import { createConnection } from "typeorm";

createConnection();

Fazer o import do arquivo index.ts no dentro da database no local que sobe a aplicação, exemplo no server.ts, OBS: importar antes das importações das rotas.

import "./database";

Criar um arquivo na raiz do projeto chamado de "ormconfig.json" com o conteúdo abaixo, como exemplo seguindo a ideia de utilizar o postgres. Criar tambem uma pasta chamada "migrations" dentro da pasta "database" para mapear nossas migrations.

{
  "type": "postgres",
  "port": 5432,
  "host": "database_ignite",
  "username": "docker",
  "password": "ignite",
  "database": "rentx",
  "migrations": ["./src/database/migrations/*.ts"],
  "cli": {
    "migrationsDir": "./src/database/migrations"
  }
}

Criar um script em packeage.json para rodar os comandos cli do type orm

  "scripts": {
    .......outros scripts prontos............
    "typeorm": "ts-node-dev ./node_modules/typeorm/cli"
  }
  
Os comandos abaixo executam algumas ações do typeorm.

// Cria uma migration
yarn typeorm migration:create -n CreateCategories
  
// O comando executa todas as migrations que ainda não foram executadas
yarn typeorm migration:run

// Reverte todas as migrations que ja foram executadas
yarn typeorm migration:revert

// Exemplo de um repositorio utilizando typeorm
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/repositories/implementations/CategoriesRepository.ts

// Exemplo de um entite utilizando
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/entities/Category.ts


------INJEÇÃO DE DEPENDENCIAS COM TSRYINGE------------------------------------

yarn add tsyringe reflect-metadata

Deixar as configurações abaixo no tsconfig.json como true:

"experimentalDecorators": true,
"emitDecoratorMetadata": true,  


Criar um arquivo "index.ts" no caminho "src/shared/container".

Exemplo do arquivo "index.ts"
https://github.com/ga-almeida/rentalx/blob/main/src/shared/container/index.ts

Exemplo da injeção no service
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/useCases/createCategory/CreateCategoryUseCase.ts

Exemplo da injeção no controller
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/useCases/createCategory/CreateCategoryController.ts

Exemplo de uma rota utilizando injeção, rota creategoriesRoutes.post
https://github.com/ga-almeida/rentalx/blob/main/src/routes/categories.routes.ts

Fazer import do "index.ts" no caminho "src/shared/container" no arquivo que sobe o servidor da aplicação, exemplo "server". OBS: importar antes da importação das rotas.

import "./shared/container";

-----------------CRIPTOGRAFIA DE SENHA COM BCRYPT---------------------------------------

yarn add bcrypt
yarn add @types/bcrypt -D

Exemplo abaixo utilizando o hash do bcrypt para gerar uma senha com o nivel de dificuldade 8.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/createUser/CreateUserUseCase.ts

Exemplo abaixo utilizando o compare do bcrypt para comparar se as senhas são as mesmas.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/authenticateUser/AuthenticateUserUseCase.ts

-----------------AUTENTICAÇÃO COM JSON WEB TOKEN---------------------------------------

yarn add jsonwebtoken
yarn add @types/jsonwebtoken -D

Exemplo abaixo para gerar token. Primeiro parametro do sign seria um objeto para passar informações com o nome do usuário, permissões por exemplo. Segundo parametro seria a palavra secreta
na hora de gerar o token (segestão: utilizar algum gerador como o MD5 https://www.md5hashgenerator.com/). O terceiro parametro seria um objeto, onde o subject pdoeria ser o identificador do usuário,
e o expireIn seria o tempo de expiração (1d significa que o tempo de expiração do token é de um dia).
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/authenticateUser/AuthenticateUserUseCase.ts

Exemplo de um middlaware para autenticar as rotas.
https://github.com/ga-almeida/rentalx/blob/main/src/middlewares/ensureAuthenticated.ts

Exemplo de como utilizar midlaware em todas as rotas daquele arquivo.
https://github.com/ga-almeida/rentalx/blob/main/src/routes/specifications.routes.ts

------------------TRABALHAR COM ERROS------------------------------

yarn add express-async-errors

Fazer a importação no arquivo de configuração do servidor, logo depois do express.
import "express-async-errors";
Exemplo: https://github.com/ga-almeida/rentalx/blob/main/src/server.ts

Criar um arquivo de modelo para gerenciar os erros.
https://github.com/ga-almeida/rentalx/blob/main/src/errors/AppError.ts

Exemplo de como utilizar a classe costumizada para algum determinado erro.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/createUser/CreateUserUseCase.ts
https://github.com/ga-almeida/rentalx/blob/main/src/middlewares/ensureAuthenticated.ts


Exemplo de como capturar o erro e devolver como resposta a classe costumizada, será utlizada um middlaware para verificar todas as rotas.
https://github.com/ga-almeida/rentalx/blob/main/src/server.ts


---------------------SUBRESCREVENDO TIPOS----------------------------------------------
Cirar uma pasta chamada "@types" dentro do "src"

Dentro dessa pasta criar uma pasta com o nome da biblioteca, exemplo "express"

Criar um arquivo chamado "index.d.ts"
https://github.com/ga-almeida/rentalx/blob/main/src/%40types/express/index.d.ts


-----------------EXEMPLO DE ALGUMAS CONSULTAS AVANÇADAS COM TYPEORM------------------
https://github.com/ga-almeida/ignite-template-database-queries

-----------------JEST PARA TESTES----------------------------------------------
yarn add jest
yarn add @types/jest -D
yarn add ts-jest -D
yarn jest --init

✔ Would you like to use Jest when running "test" script in "package.json"? … yes
✔ Would you like to use Typescript for the configuration file? … yes
✔ Choose the test environment that will be used for testing › node
✔ Do you want Jest to add coverage reports? … no
✔ Which provider should be used to instrument code for coverage? › v8
✔ Automatically clear mock calls and instances between every test? … yes

Exemplo jest.config.json
https://github.com/ga-almeida/rentalx/blob/main/jest.config.ts

Exemplo de testes
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/authenticateUser/AuthenticateUserUseCase.spec.ts


---------------MELHORANDO OS IMPORTS-------------------------------------
yarn add tsconfig-paths -D

Adicionar "-r tsconfig-paths/register" em todo que executa arquivos que contem a personalização dos paths, exemplo "dev" e "typeorm".
https://github.com/ga-almeida/rentalx/blob/main/package.json


configurar o tsconfig a propriedade paths e basuUrl
https://github.com/ga-almeida/rentalx/blob/main/tsconfig.json

No eslintrc alterar o valor de groups deixando '@shared' para '@' pra ele entender que é um importação da aplicação
https://github.com/ga-almeida/rentalx/blob/main/.eslintrc.json

Caso utilize o Jest, é preciso configurar o moduleNameMapper, é necessario tambem tirar todos os comentários do tsconfig.json.
https://github.com/ga-almeida/rentalx/blob/main/jest.config.ts


---------------TESTES DE INTEGRAÇÃO (NECESSÁRIO CONFIGURAR O JEST ANTES)-------------------------------------
yarn add supertest
yarn add @types/supertest -D

Duplicar o arquivo que sobe o servidor para poder utilizar nos tests, e remover o listen desse arquivo cópia para não subir o servidor. Exemplo, duplicar o server.ts para um arquivo chamado app.rs e exportar a variavel de inicialização.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/infra/http/app.ts
https://github.com/ga-almeida/rentalx/blob/main/src/shared/infra/http/server.ts


Exemplo de teste de integração:
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/useCases/createCategory/CreateCategoryController.spec.ts

no package.json alterar o script test conforme abaixo:
https://github.com/ga-almeida/rentalx/blob/main/package.json

-------------------------------------ENVIADO DE EMAIL COM ETHEREAL----------------------------------------

yarn add nodemailer
yarn add @types/nodemailer -D
yarn add handlebars

Modelo para template utlizando handlebars.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/views/emails/forgotPassword.hbs

Modelo para envio de email generico.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/container/providers/MailProvider/implementations/EtherealMailProvider.ts

Utilizando no service o envio de e-mail.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailUseCase.ts


-----------------------------AMAZON S3----------------------------------------

Dar permissão do S3FullAccess.

Buscar pelo serviço "S3" no site da aws.

Clicar no botão "Criar Bucket".

Escolher um nome para o bucket, exemplo "ga-almeida-s3-rentx". (Esse nome é único em toda a amazon).

Escolher a região, pode ser qualquer uma.

Desmarcar a opção de bloquear para acesso público, e marcar para reconhecer essa ação logo abaixo.

Clicar em "Criar bucket".

yarn add aws-sdk

Definir duas variaveis de ambiente. (Essas váriaveis devem ser preenchidas com os valores que foram gerados no momento da criação do usuário).
AWS_ACCESS_KEY_ID e AWS_SECRET_ACCESS_KEY

Definir duas variáveis de ambiente com o configurações do bucket. (Opcional).
AWS_BUCKET e AWS_BUCKET_REGION

yarn add mime
yarn add @types/mime -D

OBS: Caso o projeto não consiga ler as variaveis de ambiente instalar a biblioteca "dotenv", e passa o import no arquvio de configuração do servidor.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/infra/http/app.ts

Implementação dos métodos de save e delete do S3.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/container/providers/StorageProvider/implementations/S3StorageProvider.ts

Utilizando no service.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/updatedUserAvatar/UpdateUserAvatarUseCase.ts


--------------------AIDICIONAR ALGUMA PROPRIEDADE A ENTIDADE USANDO CLASS TRANSFORMER------------------------------

yarn add class-transformer


Utilizar o decorator @Exposed para adicionar a entidade a variavel
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/infra/typeorm/entities/User.ts

Recuperar a variavel adicionada.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/profileUser/ProfileUserController.ts

Mapper.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/mappers/UserMap.ts


--------------AMZON SES--------------------------
Buscar pelo serviço "SES" no site da aws.

Escolher a região que quer utilizar.

Clicar em "domains".

Clicar em "verify a new Domain", e preencher o dominio que você tem e clciar em "verify".

Clicar em "Email adress", e verificar o email.

Clicar no dominio configurado, e criar um registro no dominio com o TXTNAME E TXTVALUE.

Dar permissões para o usuário IAM do AmazonSESFullAccess.

implementacao.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/container/providers/MailProvider/implementations/SESMailProvider.ts

Caso utilize o handlebars para template de email, deve colocar dentro de tags html o conteúdo.

---------------------AMAZON EC2---------------------------

Buscar pelo serviço "EC2" no site da aws.

No painel do lado esquerdo clicar em "instâncias".

Clicar em "executar instância".

Marcar opção "Somente nivel gratuito".

Selecionar a opção "Ubunto server", com 64 bits (x86).

Selecionar a opção "qualificado para o nivel gratuito", e clicar em "próximo: configure os detalhes da instancia".

Deixar as configurações como vem por padrão, e clicar em "próximo: adicionar armazenamento".

Deixar as configurações como vem por padrão, e clicar em "próximo: adicionar tags".

Deixar as configurações como vem por padrão, e clicar em "próximo: configure o security group".

Deixar o type como "SSH", protocolo "TCP", Port range "22", Source "Custom", permite quais ips podem acessar a máquina (deixar como 0.0.0.0/0, permite que qualquer ip possa acessar). Clicar em "verificar e ativar".

Clicar em "executar". Caso não tenha um par de chaves, selecionar a opção "Criar um novo par de chaves", e colocar o nome do par de chaves.

Fazer download do arquivo pain, pra dar acesso para permitir acessar a instancia. Clicar em "executar instancias". Clicar em "exibir instancias".

No painel, clicar em "conectar", escolher "Cliente SSH".

Abrir o terminal. E ir para a pasta onde foi feito o download do arquivo pain.

Executar o comando "chmod 400 nome_do_arquivo_pain.extensão".

Executar o comando "ssh -i nome_do_arquivo_pain.extensão ....resto". O ...resto seria o que aparece no painel quando selecionamos a opção "Cliente SSH".

Criar um usuário "sudo adduser nome_do_usuario". Colocar uma senha. (Lembrar dessa senha para utilizar depois). Clicar enter em todas opções e clicar o Y pra aceitar as configurações.

Execute o comando para dar permissões root ao usuário "sudo usermod -aG sudo nome_do_usuario".

Execute o comando para utilizar o usuário criado "sudo su - nome_do_usuario".

Criar uma pasta para que nossa instancia tenha acesso "mkdir .ssh".

Alterar a permissão da pasta .ssh para somente o proprietário pode manipular com o comando "chmod 700 .ssh/".

Entrar na pasta .ssh "cd .ssh/" e criar o arquivo de autorização "touch authorized_keys".

Abrir o arquivo com VIM através do comando "vim authorized_keys".

Abrir um novo terminal e digitar "ssh-keygen" e ir pressionando o botão "ENTER" até gerar a key (Fazer isso no Linux ou Mac).

Para pegar essa chave gerada, execute o comando "cat ~/.ssh/id_rsa.pub". Copiar a chave.

Voltar para o terminal na isntancia da AWS, apertar a tecla "i" para conseguir inserir algo dentro do arquivo que abrimos, e colar a chave com o atalho ctrl+V e para salvar use o atalho ctrl+C e digite ":wq!" e pressione o botão "ENTER".

Dar permissão para o arquivo authorized_keys "chmod 600 authorized_keys".

Agora pode ser acessado a máquina ec2 com usuário que criamos. Abra um novo terminal e execute o comando "ssh nome_do_usuario_criado@IP_da_instancia". (A partir de agora utilizar esse usuário não precisando configurar um novo usuário para poder acessar a máquina).

Importante atualizar os pacotes instalados, executando o comando "sudo apt update".

Instalar tudo o que é necessário para rodar o projeto, como exemplo será utilizado um projeto em NodeJs.

Seguir as instruções de intalação do Node no Ubunto no site oficial.

Seguir as instruções de instalação do Docker e Docker-Compose no Ubunto no site oficial. (Caso esteja usando Docker no projeto).

Seguir as instruções de intalação do Yarn no Ubunto no site oficial. (Caso esteja usando Yarn no projeto).

Feito as instalção necessárias para rodar o projeto, antes de colocarmos na instancia EC2 é necessario que ele esteja em JavaScript. Dessa forma se o projeto estiver em TypeScript terá que ser convertido para JavaScript.

Instalar no projeto as seguintes bibliotecas "yarn add @babel/cli @babel/core @babel/node @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators @babel/preset-env @babel/preset-typescript babel-plugin-module-resolver babel-plugin-transform-typescript-metadata -D".

Criar na raiz do projeto o arquivo com o nome "babel.config.js" com as configurações abaixo.
https://github.com/ga-almeida/rentalx/blob/main/babel.config.js

Definir um script chamado "build" dizendo para converter tudo que está na pasta "src" que são somente os arquivos que queremos converter.
https://github.com/ga-almeida/rentalx/blob/main/tsconfig.json

Feito isso, entrar com o usuário na instância EC2 e gerar um chave ssh com o comando "ssh-keygen" e ir pressionando o botão "ENTER" até gerar a key (Fazer isso no Linux ou Mac).

Para pegar essa chave gerada, execute o comando "cat ~/.ssh/id_rsa.pub". Copiar a chave.

Adicionar essa chave no GitHub para que a máquina EC2 possa fazer um git clone do projeto.

Na instancia EC2 criar um diretório onde será feito o download do projeto "mkdir app", depois "cd app".

Execute o comando "git clone ssh_do_projeto_no_git_hub".

Entrar dentro da pasta do projeto e executar o comando "yarn" para instalar as bibliotecas do projeto.

Depois, executar o comando "yarn build" para gerar nosso projeto em javaScript.

Alterar o nome de arquvios example como o "ormconfig.example.json" para "ormconfig.json" para nao quebrar as configurações da aplicação com o comando "cp ormconfig.example.json ormconfig.json".

Editar o arquivo para apontar para para a pasta "dist" e alterar as extensões de "ts" para "js" com o comando "vim ormconfig.json". E para salvar use o atalho ctrl+C e digite ":wq!" e pressione o botão "ENTER".

Em produção, é interessante não expor portas padrões como de container,banco de dados entre outros serviços.

Logo após, executar o comando para subir o servidor dentro da pasta dist que no exemplo seria "node dist/shared/infra/http/server.js".

Criar um ssh para o github actions e dar um nome no momento da criação.

Copiar a chave (nome_da_chave.pub) e referenciar no authorized_keys dentro da nossa instancia EC2. (utilizar o comando cat >> authorized_keys, vai abrir para adicionarmos algo dentro do arquivo. Cole a chave, e use o atalho ctrl+D).

Copiar a chave (nome_da_chave) ir dentro de "settings" do repositório e clicar em "secrets".

Clicar em "new repository secret" dar o nome de SSH_KEY e o valor que foi copiado.

Adicionar uma key com o nome SSH_HOST e o valor é o IP da instancia EC2.

Adicionar uma key com o nome SSH_USER e o valor é o app (que é o usuário que criamos para se logar na instancia EC2).

Adicionar uma key com o nome SSH_PORT e o valor é o 22 (que foi o que definimos na criação da instancia EC2).

Ir no repositŕoio no github, clicar em "Actions" e clicar em "set up a workflow yourself".

Utilizar essa configuração como exemplo:
name: CI

on:
  push:
    # Qual brnach será feito o pipeline quando houver push
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    # Em qual SO vai ser feito o pipeline
    runs-on: ubuntu-latest

    # Passo a passo
    steps:
      # Pega o código mais atual do github
      - uses: actions/checkout@v2
      
      # Setar qual Node está utilizando no projeto
      - name: Setup NodeJs
        uses: actions/setup-node@v2
        with: 
          node-version: 14.x
      
      # Instalar as dependencias
      - name: Install Dependencies
        run: yarn

      # Build do projeto
      - name: Build
        run: yarn build
        
      # Utilizar o SCP que copia arquivos SSH
      - name: Build
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          # Ignorar a node_modules
          source: "., !node_modules"
          # Onde enviar todo o projeto
          target: "~/app/api-rentx"
          
      # Utilizar o ssh actions
      - name: Update API
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/app/api-rentx
            yarn
            ./node_modules/.bin/typeorm migration:run
            pm2 restart rentx_api

Clicar em start commit, dar um nome qualquer para a execução do pipeline.

Na instancia EC2 é bom configurar um proxy reverso. No exemplo será utilizado o nginx.

Na instancia EC2 instalar nginx "sudo apt install nginx".

Verificar na aws a sua instancia qual o grupo de segurança. Clicar em "Instancias", selecionar sua isntancia, e ver no final do link onde tem o texto "Grupos de segurança" o nome do grupo.

Clicar em "Security Groups" qeu fica em "Rede e segurança". Selecionar o grupo, clicar em Regras de entrada, clicar em "Editar regras de entrada". Adicionar o tipo "http", otigem pode ser "qualquer lugar" e adicionar uma da mesma forma mas para o "https".

Acessar na instancia EC2 o caminho a seguir "cd /etc/nginx/sites-available".

Criar um arquivo de configuração nginx "sudo touch nome_do_arquivo", logo depois abrir com o vim para editar o arquivo "sudo vim nome_do_arquivo". Apertar a tecla "i" para conseguir inserir algo dentro do arquivo que abrimos, assim que finalizar de configurar o arquivo digite ":wq!" e pressione o botão "ENTER" para salvar.

Guia para configurar nginx: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04-pt

server {
    listen 80 default_server;
    listen [::] default_server;
    
    location / {
        proxy_pass http://localhost:3333;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }	
}

Agora que foi configurado o arquivo, é preciso criar um link simbólico para esse arquivo. Entrar na pasta de sites-enabled "cd /etc/nginx/sites-enabled".

Digitar o comando para criar um link simbólico "sudo ln -s /etc/nginx/sites-available/nome_do_arquivo nome_do_arquivo". 

Agora é preciso remover o arquivo default e o link simbólico default, executar os seguintes comandos, "sudo rm -rf default", "cd /etc/nginx/sites-available" e depois "sudo rm -rf default".

Agora é só restartar o nginx "sudo service nginx restart" (Caso de bad gateway verificar se o servidor está rodando).

Utilizar o PM2 (gerenciador de processos node) para startar a aplicação.

Na instancia EC2 executar o comando "sudo yarn global add pm2".

Executar o comando "pm2 start dist/shared/infra/http/server.js --name nome_dado_ao_servico" isso irá criar um serviço. O comando "pm2 stop nome_dado_ao_servico" ira parar o serviço. O comando "pm2 start nome_dado_ao_servico" irá executar o serviço que foi salvo.

Agora falta conseguir utilizar o dominio pra fazer acesso a API e adcionar o protoclo https.

No painel da aws procurar pelo route 53 (Serviço de gerenciamento de DNS). Se não tiver nada registrar clicar em "zonas hospedadas" e depois clicar em "criar zona hospedada", colocar o dominio no campo "nome do dominio", deixar como zona hospedada publica e depois clicar em "criar zona hospedada".

Acessar a zona que foi criada, por padrão irão ser criados o NS e o SOA. Clicar em "criar registro", no campo "nome do registro" colocar o subdominio que você quer utilizar. O tipo de registro deixar como "A" e em "valor" colocar o IP da instancia EC2.

Ir até a pltaforma que você faz a configuração de DNS e criar um subdominio com as mesmas informações que foram usadas para crira um registro.

Para verificar se está tudo okay com o DNS configurado, pesquisar no site "whatsmydns.net".

Utilizar o certbot para configurar o certifica SSL.

No site certbot colocar no primeiro campo Nginx on Ubunto e daí sera mostrado todo o passo a passo na instancia EC2 para liberar o certificado.

Verificar se o arquivo nginx foram feitas as altereções depois do passo a passo. E se estiver tudo certo, fazer o restar com o comando "sudo service nginx restart".

Dar a permissão para a aplicação ser acessada por qualquer outra aplicação através do CORS.

Instalar a biblioteca CORS no projeto "yarn add cors" e "yarn add @types/cors -D".

No arquivo responsavel por subir o servidor antes de chamar as rotas, habilitar o cors.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/infra/http/app.ts

---------------------------SEGURANÇA DO APP com RATE LIMITER-------------------------------------

Configurar o redis no projeto (no exemplo está sendo utilizado docker-compose).
github

yarn add redis
yarn add @types/redis -D
yarn add rate-limiter-flexible

Exemplo do middleware.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/infra/http/middlewares/rateLimiter.ts

Utilizar no arquivo que sobe o servidor para adicionar o middleware criado, deve ser adicionado antes das rotas.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/infra/http/app.ts

--------------------------OBSERVAR ERROS DA APLICAÇÃO COM SENTRY---------------------------------------------

Acessar sentry.io caso não tenha, realziar o cadastro.

Clicar em "Projects" e depois em "Create project" clicar em "Express" (que no caso é o exemplo desse projeto).

Selecionar a opção "Alert me on every new issue".

Em "Project name" colocar qualquer nome (Pode ser o nome do projeto).

E defino qual o time no campo "Team".

E logo após isso serpa mostrado algumas configurações que devem ser feitas no projeto.

As configurações do sentry no projeto geralmente iram ficar no arquivo que sobe o servidor, importante fazer essas configurações antes das rotas.
https://github.com/ga-almeida/rentalx/blob/main/src/shared/infra/http/app.ts

----------------------------UTILIZAR SERVERLESS------------------------------------------------

Instalação
https://www.serverless.com/framework/docs/getting-started/

Exemplos
https://www.serverless.com/examples/

Criar projeto rodando o comando "serverless create --template nome_do_template --path nome_do_projeto".

Instalar alguns plugins.
yarn add serverless-offline -D

Remover no package json o "main", "test" do script, "engines", "author" e "license". Criar um script chamado "dev" com o valor "serverless offline"

serverless.yml é o arquivo de configuração do projeto.
https://github.com/ga-almeida/ignitecertificate/blob/main/serverless.yml

Criar um usuário pelo console aws e dar o acesso de administratorAccess. Copiar ID da chave de acesso e a Chave secreta.

Executar o comando para adicionar as credencias ao projeto "serverless config credentials --provider aws --key=CHAVE_DE_ACESSO --secret CHAVE_SECRETA -o". Utilizar -o no final do comando caso ja tenha credentials salva, para verificar ir no diretoria inicial pesquisar pela pasta .aws e verficar se tem um arquivo credentials.

Configurando o banco DynamoDB da amazon.
yarn add serverless-dynamodb-local -D
serverless dynamodb install

Configurações dynamodb.
https://github.com/ga-almeida/ignitecertificate/blob/main/serverless.yml
ghttps://github.com/ga-almeida/ignitecertificate/blob/main/src/utils/dynamodbCliente.ts

Usar esse comando depois de estar configurado o dynamodb "serverless dynamodb start". (Opcional criar um script).

Exemplo de function.
https://github.com/ga-almeida/ignitecertificate/blob/main/src/functions/generateCertificate.ts

Caso precise empacote alguma pasta externa como por exemplo um pasta de templates seguir as intruções abaixo:
yarn add copy-webpack-plugin -D
Configuração: https://github.com/ga-almeida/ignitecertificate/blob/main/webpack.config.js
