**Código de bibliotecas ou conceitos para NodeJs**

-----------UPLOAD DE ARQUIVOS COM MULTER-----------------

yarn add multer
yarn add @types/multer -D

// biblioteca para ler arquivos csv
yarn add csv-parse

Fazer a importação aonde vai utilizar o multer.

import multer from "multer";

Criar uma pasta no projeto para mandar os arquivos de upload. No exemplo será utilizada uma pasta temporária na raiz do projeto chamada "tmp", assim que utilizar esses arquivos será feito a deleção.

const upload = multer({
  dest: "./tmp",
});

O multer funciona como um middleware, logo deverá ser passado como parametro para a rota. Conforme o exemplo abaixo.

//route
categoriesRoutes.post("/import", upload.single("file"), (request, response) => {
  return importCategoryController.handle(request, response);
});

//controller
import { Request, Response } from "express";

import { ImportCategoryUseCase } from "./ImportCategoryUseCase";

class ImportCategoryController {
  constructor(private importCategoryUseCase: ImportCategoryUseCase) {}

  handle(request: Request, response: Response): Response {
   /**
   * O nome da váriavel deve ser o mesmo
   * que foi passado como parametro para o upload.single("file")
   */
    const { file } = request;

    this.importCategoryUseCase.execute(file);

    return response.send();
  }
}

export { ImportCategoryController };


// service ou useCase
import csVparse from "csv-parse";
import fs from "fs";

import { ICategoriesRepository } from "../../repositories/ICategoriesRepository";

interface IImportCategory {
  name: string;
  description: string;
}

class ImportCategoryUseCase {
  constructor(private categoriesRepository: ICategoriesRepository) {}

  /**
   * Funcão para leitura de arquivo
   * @param file Arquivo que será manipulado
   * @returns Returna um array com as informaçõpes manipuladas
   */
  loadCategory(file: Express.Multer.File): Promise<IImportCategory[]> {
    return new Promise((resolve, reject) => {
      const categories: IImportCategory[] = [];

      /**
       * Criar leitura do arquivo
       */
      const stream = fs.createReadStream(file.path);

      /**
       * Por padrão o csvParse entende que o
       * delimitador (separador de informações) é a vírgula (,).
       */
      const parseFile = csVparse();

      /**
       * Pega informação de dentro do arquivo e coloca em outro lugar
       */
      stream.pipe(parseFile);

      /**
       * Retornar o array se tudo der certo,
       * ou um erro caso de errado.
       */
      parseFile
        .on("data", async (line) => {
          const [name, description] = line;

          categories.push({
            name,
            description,
          });
        })
        .on("end", () => {
          /**
           * Remove o arquivo da pasta temporária
           */
          fs.promises.unlink(file.path);
          resolve(categories);
        })
        .on("error", (err) => {
          reject(err);
        });
    });
  }

  async execute(file: Express.Multer.File): Promise<void> {
    const categories = await this.loadCategory(file);

    /**
     * Faz a leitura de cada array e salva no repositório
     */
    categories.map(async (category) => {
      const { name, description } = category;

      const existCategory = this.categoriesRepository.findByName(name);

      if (!existCategory) {
        this.categoriesRepository.create({
          name,
          description,
        });
      }
    });
  }
}

export { ImportCategoryUseCase };

Exemplo de exportar a configuração do upload em outro arquivo
https://github.com/ga-almeida/rentalx/blob/main/src/config/upload.ts

Exemplo de uso na rota "users"
https://github.com/ga-almeida/rentalx/blob/main/src/routes/users.routes.ts

--------------------Documentação de API com SWAGGER-----------------------

yarn add swagger-ui-express
yarn add @types/swagger-ui-express -D

Criar um arquivo json dentro da pasta "src" com o nome swagger.json.

{
  "openapi": "3.0.0",
  "info": {
    // Titulo da documentação
    "title": "Rentalx Documentation",

    // Descrição da documentação
    "description": "This is an API Rent", 

    // Versão da documentação
    "version": "1.0.0",

    // Contato do dev
    "contact": {
      "email": "gabrielsantos.almeida@hotmail.com"
    }
  },
  
  // Mapeamento das rotas e informações para o que elas servem
  "paths": {
  
    // Exemplo da rota "/categories"
    "/categories": {
      
      // O tipo do verbo da rota, no exemplo "post"
      "post": {
      
      	// Definir uma tag
      	"tags": ["Category"],
      	
      	// Resumo da rota
        "summary": "Create a category",
        
        // Descrição da rota
        "description": "Create a new category",
        
        // O corpo da rota caso exista
        "requestBody": {
        
          // O conteúdo da rota
          "content": {
          
            // O tipo que a rota recebe como valor , no exemplo "json"
            "application/json": {
            
              // Definição dos tipos e atributos
              "schema": {
                "type": "object",
                
                // as propriedades que é passado no corpo da requisição
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                
                // Exemplo de como deve ser passado para o corpo da requisição 
                "example": {
                  "name": "Category name sample",
                  "description": "Category description sample"
                }
              }
            }
          }
        },
        
        // Definição das possiveis respostas da rota
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Category already exists"
          }
        }
      },
      
      // Exemplo de um rota do tipo get
      "get": {
        "tags": ["Category"],
        "summary": "List categories",
        "description": "List all categories",
        "responses": {
          "200": {
            "description": "Success",
            
            // Exemplo de conteúdo que será retornado
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "created_at": {
                      	 "type": "string",
                      	 "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


Fazer a importação do swagger no arquivo onde sobe o servidor do projeto. E disponibilizar uma rota para a documentação das apis.

import express from "express";
import swaggerUi from "swagger-ui-express";

import swaggerFile from "./swagger.json";

const app = express();

app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerFile));

-------------UTILIZAR TYPEORM PARA UTILIZAR BANCO DE DADOS-------------

Instalar a biblioteca typeorm com reflect metadata

yarn add typeorm reflect-metadata

Instalar o driver do banco de dados que irá utilizar no projeto, exemplo postgres:

yarn add pg

Deixar as configurações abaixo no tsconfig.json como true:

"experimentalDecorators": true,
"emitDecoratorMetadata": true,  

Criar um pasta chamada "database" dentro da pasta "src".

Dentro da pasta "database", criar um arquivo "index.ts" com o conteúdo abaixo.

import { createConnection } from "typeorm";

createConnection();

Fazer o import do arquivo index.ts no dentro da database no local que sobe a aplicação, exemplo no server.ts, OBS: importar antes das importações das rotas.

import "./database";

Criar um arquivo na raiz do projeto chamado de "ormconfig.json" com o conteúdo abaixo, como exemplo seguindo a ideia de utilizar o postgres. Criar tambem uma pasta chamada "migrations" dentro da pasta "database" para mapear nossas migrations.

{
  "type": "postgres",
  "port": 5432,
  "host": "database_ignite",
  "username": "docker",
  "password": "ignite",
  "database": "rentx",
  "migrations": ["./src/database/migrations/*.ts"],
  "cli": {
    "migrationsDir": "./src/database/migrations"
  }
}

Criar um script em packeage.json para rodar os comandos cli do type orm

  "scripts": {
    .......outros scripts prontos............
    "typeorm": "ts-node-dev ./node_modules/typeorm/cli"
  }
  
Os comandos abaixo executam algumas ações do typeorm.

// Cria uma migration
yarn typeorm migration:create -n CreateCategories
  
// O comando executa todas as migrations que ainda não foram executadas
yarn typeorm migration:run

// Reverte todas as migrations que ja foram executadas
yarn typeorm migration:revert

// Exemplo de um repositorio utilizando typeorm
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/repositories/implementations/CategoriesRepository.ts

// Exemplo de um entite utilizando
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/entities/Category.ts


------INJEÇÃO DE DEPENDENCIAS COM TSRYINGE------------------------------------

yarn add tsyringe reflect-metadata

Deixar as configurações abaixo no tsconfig.json como true:

"experimentalDecorators": true,
"emitDecoratorMetadata": true,  


Criar um arquivo "index.ts" no caminho "src/shared/container".

Exemplo do arquivo "index.ts"
https://github.com/ga-almeida/rentalx/blob/main/src/shared/container/index.ts

Exemplo da injeção no service
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/useCases/createCategory/CreateCategoryUseCase.ts

Exemplo da injeção no controller
https://github.com/ga-almeida/rentalx/blob/main/src/modules/cars/useCases/createCategory/CreateCategoryController.ts

Exemplo de uma rota utilizando injeção, rota creategoriesRoutes.post
https://github.com/ga-almeida/rentalx/blob/main/src/routes/categories.routes.ts

Fazer import do "index.ts" no caminho "src/shared/container" no arquivo que sobe o servidor da aplicação, exemplo "server". OBS: importar antes da importação das rotas.

import "./shared/container";

-----------------CRIPTOGRAFIA DE SENHA COM BCRYPT---------------------------------------

yarn add bcrypt
yarn add @types/bcrypt -D

Exemplo abaixo utilizando o hash do bcrypt para gerar uma senha com o nivel de dificuldade 8.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/createUser/CreateUserUseCase.ts

Exemplo abaixo utilizando o compare do bcrypt para comparar se as senhas são as mesmas.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/authenticateUser/AuthenticateUserUseCase.ts

-----------------AUTENTICAÇÃO COM JSON WEB TOKEN---------------------------------------

yarn add jsonwebtoken
yarn add @types/jsonwebtoken -D

Exemplo abaixo para gerar token. Primeiro parametro do sign seria um objeto para passar informações com o nome do usuário, permissões por exemplo. Segundo parametro seria a palavra secreta
na hora de gerar o token (segestão: utilizar algum gerador como o MD5 https://www.md5hashgenerator.com/). O terceiro parametro seria um objeto, onde o subject pdoeria ser o identificador do usuário,
e o expireIn seria o tempo de expiração (1d significa que o tempo de expiração do token é de um dia).
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/authenticateUser/AuthenticateUserUseCase.ts

Exemplo de um middlaware para autenticar as rotas.
https://github.com/ga-almeida/rentalx/blob/main/src/middlewares/ensureAuthenticated.ts

Exemplo de como utilizar midlaware em todas as rotas daquele arquivo.
https://github.com/ga-almeida/rentalx/blob/main/src/routes/specifications.routes.ts

------------------TRABALHAR COM ERROS------------------------------

yarn add express-async-errors

Fazer a importação no arquivo de configuração do servidor, logo depois do express.
import "express-async-errors";
Exemplo: https://github.com/ga-almeida/rentalx/blob/main/src/server.ts

Criar um arquivo de modelo para gerenciar os erros.
https://github.com/ga-almeida/rentalx/blob/main/src/errors/AppError.ts

Exemplo de como utilizar a classe costumizada para algum determinado erro.
https://github.com/ga-almeida/rentalx/blob/main/src/modules/accounts/useCases/createUser/CreateUserUseCase.ts
https://github.com/ga-almeida/rentalx/blob/main/src/middlewares/ensureAuthenticated.ts


Exemplo de como capturar o erro e devolver como resposta a classe costumizada, será utlizada um middlaware para verificar todas as rotas.
https://github.com/ga-almeida/rentalx/blob/main/src/server.ts


---------------------SUBRESCREVENDO TIPOS----------------------------------------------
Cirar uma pasta chamada "@types" dentro do "src"

Dentro dessa pasta criar uma pasta com o nome da biblioteca, exemplo "express"

Criar um arquivo chamado "index.d.ts"
https://github.com/ga-almeida/rentalx/blob/main/src/%40types/express/index.d.ts












































